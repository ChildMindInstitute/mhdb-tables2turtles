#!/usr/bin/env python
"""
This program converts five specific mental health spreadsheet workbooks to RDF
text documents.

Authors:
    - Arno Klein, 2017-2019 (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017–2018 (jon.clucas@childmind.org)

Copyright 2019, Child Mind Institute MATTER Lab (https://matter.childmind.org),
Apache v2.0 License

"""
import os
import sys
mhdb_path = os.path.abspath(os.getcwd())
if mhdb_path not in sys.path:
    sys.path= [
        mhdb_path,
        *sys.path
    ]
try:
    from mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.ingest import *
    from mhdb.write_ttl import check_iri, turtle_from_dict, write_header
except:
    from mhdb.mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.mhdb.ingest import *
    from mhdb.mhdb.write_ttl import check_iri, turtle_from_dict, write_header
import numpy as np
import pandas as pd


def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    try:
        behaviorsFILE = download_google_sheet(
            'data/behaviors.xlsx',
            "1OHtVRqRXvCUuhyavcLSBU9YkiEJfThFKrXHmcg4627M"
        )
    except:
        behaviorsFILE = 'data/behaviors.xlsx'
    try:
        assessmentsFILE = download_google_sheet(
            'data/assessments.xlsx',
            "1VUf3XnieYThY8OA6JWtpNP4zI2xa9xak9LXuyH_PaoE"
        )
    except:
        assessmentsFILE = 'data/assessments.xlsx'
    try:
        technologiesFILE = download_google_sheet(
            'data/technologies.xlsx',
            "1LeLlrsvBWMYTTIXTVtkynmBzzb0Uzi1OwpRLfyRAwzM"
        )
    except:
        technologiesFILE = 'data/technologies.xlsx'
    try:
        dsm5FILE = download_google_sheet(
            'data/dsm5.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        dsm5FILE = 'data/dsm5.xlsx'
    try:
        referencesFILE = download_google_sheet(
            'data/references.xlsx',
            "1KDZhoz9CgHBVclhoOKBgDegUA9Vczui5wj61sXMgh34"
        )
    except:
        referencesFILE = 'data/references.xlsx'

    base_uri = "http://www.purl.org/mentalhealth"
    behaviors_outfile = os.path.join(os.getcwd(), 'behaviors.ttl')
    assessments_outfile = os.path.join(os.getcwd(), 'assessments.ttl')
    technologies_outfile = os.path.join(os.getcwd(), 'technologies.ttl')
    dsm5_outfile = os.path.join(os.getcwd(), 'dsm5.ttl')
    references_outfile = os.path.join(os.getcwd(), 'references.ttl')

    # --------------------------------------------------------------------------
    # Import spreadsheets
    # --------------------------------------------------------------------------
    behaviors_xls = pd.ExcelFile(behaviorsFILE)
    assessments_xls = pd.ExcelFile(assessmentsFILE)
    technologies_xls = pd.ExcelFile(technologiesFILE)
    dsm5_xls = pd.ExcelFile(dsm5FILE)
    references_xls = pd.ExcelFile(referencesFILE)
    X = ['', 'nan', np.nan, 'None', None]

    # --------------------------------------------------------------------------
    # Create output RDF
    # --------------------------------------------------------------------------
    label = "mental health database"
    ddashes = "================================================================================"
    comment="""\n\n{0}\n\t\tMental Health Database\n{0}
This mental health database inter-relates information about mental health
symptoms, assessment questionnaires and tasks, etc., and is licensed
under the terms of the Creative Commons BY license.
Current information can be found on the website, http://mentalhealth.tech.

""".format(ddashes)

    dsm5_statements = ingest_dsm5(dsm5_xls, behaviors_xls, references_xls,
                                  statements={})

    statements = dsm5_statements

    #assessments_statements = ingest_assessments(assessments_xls, dsm_xls,
    #                                            behaviors_xls, technologies_xls,
    #                                            references_xls, statements={})


    # statements = domains(
    #     domains_xls,
    #     dsm5_xls,
    #     behaviors_sheet1(
    #         behaviors_xls = behaviors_xls,
    #         dsm5_xls = dsm5_xls
    #     )
    # )
    #
    # dsm_statements = {
    #     statement: statements[
    #         statement
    #     ] for statement in statements if (
    #         (
    #             "dcterms:source" in statements[statement]
    #         ) and any(
    #             "dsm" in s for s in [
    #                 source.lower() for source in statements[
    #                     statement
    #                 ][
    #                     "dcterms:source"
    #                 ]
    #             ]
    #         )
    #     )
    # }
    #
    # non_dsm_statements = {
    #     statement: statements[
    #         statement
    #     ] for statement in statements if statement not in dsm_statements
    # }
    #
    # mhdb_turtle = turtle_from_dict(non_dsm_statements)
    dsm5_turtle = turtle_from_dict(dsm5_statements)

    # --------------------------------------------------------------------------
    # Create header with ontologies
    # --------------------------------------------------------------------------
    import_prefixes = set()
    for subject in statements:
        if ":" in subject and \
        "://" not in subject and \
        not subject.startswith('"'):
            import_prefixes.add(subject.split(":")[0])
        for predicate in statements[subject]:
            if ":" in predicate and \
            "://" not in predicate and \
            not predicate.startswith('"'):
                import_prefixes.add(predicate.split(":")[0])
            for object in statements[subject][predicate]:
                #print(subject, predicate, object)
                if ":" in object and \
                "://" not in object and \
                not object.startswith('"'):
                    import_prefixes.add(object.split(":")[0])

    prefixes = [(
        row[1]["Prefix"],
        row[1]["PrefixURI"],
        row[1]["ImportURI"]
    ) for row in references_xls.parse(
        'ontologies'
    ).iterrows() if row[1]["Prefix"] in import_prefixes]

    # header_string = write_header(
    #     base_uri,
    #     version,
    #     label,
    #     comment,
    #     prefixes=prefixes,
    #     imports=True
    # )

    # --------------------------------------------------------------------------
    # Write to DSM5 output file
    # --------------------------------------------------------------------------
    dsm5fid = open(dsm5_outfile, 'w')
    dsm5fid.write(write_header(
        "{0}/{1}".format(base_uri, "dsm"),
        version,
        "{0} — {1}".format(label, "DSM-V supplement"),
        "\n".join([
            comment,
            "{0}\n\t\tDSM-V supplement\n{0}".format(ddashes)
        ]),
        prefixes=prefixes
    ))
    dsm5fid.write("{0} .\n".format(dsm5_turtle.rstrip(" .")))

    # --------------------------------------------------------------------------
    # Write to each of the other output files
    # --------------------------------------------------------------------------
    # fid = open(outfile, 'w')
    # fid.write(header_string)
    # fid.write("{0} .\n".format(mhdb_turtle.rstrip(" .")))


if __name__ == "__main__":
    main()
