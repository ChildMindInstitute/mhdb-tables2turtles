#!/usr/bin/env python
"""
This program converts specific mental health spreadsheet workbooks to RDF
text documents.

This mental health database interrelates information about mental health-related:
  - Mental states
  - Behaviors related to mental health
  - Measures and sensors for measuring mental states and behaviors
  - Tasks for measuring cognition [cognitiveatlas.org and elsewhere]
  - Questions from mental health questionnaires
  - Signs, symptoms, and mental disorders [DSM-5 and ICD-10]
  - Projects and groups related to mental health
  - References
    - Articles and practical guides for parents and therapists [Child Mind Institute]
    - Mental health questionnaires
    - Scientific articles
    - Licenses
    - Therapies and medications

The database is licensed under the terms of the Creative Commons BY license.
Current information can be found on the website, https://matter.childmind.org.

Authors:
    - Arno Klein, 2017-2019 (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017â€“2018 (jon.clucas@childmind.org)

Copyright 2019, Child Mind Institute MATTER Lab (https://matter.childmind.org),
Apache v2.0 License

"""
import os
import sys
mhdb_path = os.path.abspath(os.getcwd())
if mhdb_path not in sys.path:
    sys.path= [
        mhdb_path,
        *sys.path
    ]
try:
    from mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.ingest import *
    from mhdb.write_ttl import check_iri, turtle_from_dict, write_header
except:
    from mhdb.mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.mhdb.ingest import *
    from mhdb.mhdb.write_ttl import check_iri, turtle_from_dict, write_header
import numpy as np
import pandas as pd

run_all = 1
if run_all:
    do_states = 0
    do_behaviors = 0 # SKIP
    do_measures = 1
    do_tasks = 1
    do_questions = 1
    do_dsm5 = 1
    do_projects = 1
    do_references = 1
    do_claims = 0 # SKIP
else:
    do_states = 0
    do_behaviors = 0 # SKIP
    do_measures = 1
    do_tasks = 0
    do_questions = 0
    do_dsm5 = 0
    do_projects = 0
    do_references = 0
    do_claims = 0 # SKIP


def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    try:
        statesFILE = download_google_sheet(
            'data/states.xlsx',
            "11OkIWLwZYi9xkpuFODAKXQZHEFeMvYCQ8BTfIBKm0Z8"
        )
    except:
        statesFILE = 'data/states.xlsx'
    try:
        behaviorsFILE = download_google_sheet(
            'data/behaviors.xlsx',
            "1OHtVRqRXvCUuhyavcLSBU9YkiEJfThFKrXHmcg4627M"
        )
    except:
        behaviorsFILE = 'data/behaviors.xlsx'
    try:
        measuresFILE = download_google_sheet(
            'data/measures.xlsx',
            "1ELaw79zmtmjmrg3J7slyoP-HXdfQRWa1Aqnbp50cmj8"
        )
    except:
        measuresFILE = 'data/measures.xlsx'
    try:
        tasksFILE = download_google_sheet(
            'data/tasks.xlsx',
            "1jTeq7whH8y2MkhLpMFh52y5FOMDxKCantPTrkD48zuQ"
        )
    except:
        tasksFILE = 'data/tasks.xlsx'
    try:
        questionsFILE = download_google_sheet(
            'data/questions.xlsx',
            "1VUf3XnieYThY8OA6JWtpNP4zI2xa9xak9LXuyH_PaoE"
        )
    except:
        questionsFILE = 'data/questions.xlsx'
    try:
        dsm5FILE = download_google_sheet(
            'data/dsm5.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        dsm5FILE = 'data/dsm5.xlsx'
    try:
        projectsFILE = download_google_sheet(
            'data/projects.xlsx',
            "1LeLlrsvBWMYTTIXTVtkynmBzzb0Uzi1OwpRLfyRAwzM"
        )
    except:
        projectsFILE = 'data/projects.xlsx'
    try:
        referencesFILE = download_google_sheet(
            'data/references.xlsx',
            "1KDZhoz9CgHBVclhoOKBgDegUA9Vczui5wj61sXMgh34"
        )
    except:
        referencesFILE = 'data/references.xlsx'
    try:
        claimsFILE = download_google_sheet(
            'data/claims.xlsx',
            "1XaOcztrjtoh2Jf5c5FrxNNvbAriNnvSD9YYzgOpv474"
        )
    except:
        claimsFILE = 'data/claims.xlsx'

    base_uri = "http://www.purl.org/mentalhealth"

    states_outfile = os.path.join('../output', 'states.ttl')
    measures_outfile = os.path.join('../output', 'measures.ttl')
    tasks_outfile = os.path.join('../output', 'tasks.ttl')
    questions_outfile = os.path.join('../output', 'questions.ttl')
    dsm5_outfile = os.path.join('../output', 'dsm5.ttl')
    projects_outfile = os.path.join('../output', 'projects.ttl')
    references_outfile = os.path.join('../output', 'references.ttl')

    behaviors_outfile = os.path.join('../output', 'behaviors.ttl')
    claims_outfile = os.path.join('../output', 'claims.ttl')

    # --------------------------------------------------------------------------
    # Import spreadsheets
    # --------------------------------------------------------------------------
    states_xls = pd.ExcelFile(statesFILE)
    behaviors_xls = pd.ExcelFile(behaviorsFILE)
    measures_xls = pd.ExcelFile(measuresFILE)
    tasks_xls = pd.ExcelFile(tasksFILE)
    questions_xls = pd.ExcelFile(questionsFILE)
    dsm5_xls = pd.ExcelFile(dsm5FILE)
    projects_xls = pd.ExcelFile(projectsFILE)
    references_xls = pd.ExcelFile(referencesFILE)
    claims_xls = pd.ExcelFile(claimsFILE)

    X = ['', 'nan', np.nan, 'None', None, []]

    # --------------------------------------------------------------------------
    # Create output RDF
    # --------------------------------------------------------------------------
    label = "mental health database"
    ddashes = "================================================================================"
    comment="""\n\n{0}\n\t\tMental Health Database (MHDB)\n{0}
This mental health database interrelates information about mental health-related:
  - Mental states
  - Behaviors related to mental health
  - Measures and sensors for measuring mental states and behaviors
  - Tasks for measuring cognition [cognitiveatlas.org and elsewhere]
  - Questions from mental health questionnaires
  - Signs, symptoms, and mental disorders [DSM-5 and ICD-10]
  - Projects and groups related to mental health
  - References
    - Articles and practical guides for parents and therapists [Child Mind Institute]
    - Mental health questionnaires
    - Scientific articles
    - Licenses
    - Therapies and medications
The database is licensed under the terms of the Creative Commons BY license.
Current information can be found on the website, https://matter.childmind.org.
""".format(ddashes)

    if do_states:
        states_statements = ingest_states(states_xls, references_xls,
                                          statements={})
        states_turtle = turtle_from_dict(states_statements)
    else:
        states_statements = []
        states_turtle = []

    if do_behaviors:
        behaviors_statements = ingest_behaviors(behaviors_xls, references_xls,
                                                dsm5_xls, statements={})
        behaviors_turtle = turtle_from_dict(behaviors_statements)
    else:
        behaviors_statements = []
        behaviors_turtle = []

    if do_measures:
        measures_statements = ingest_measures(measures_xls, references_xls,
                                              statements={})
        measures_turtle = turtle_from_dict(measures_statements)
    else:
        measures_statements = []
        measures_turtle = []

    if do_tasks:
        tasks_statements = ingest_tasks(tasks_xls, states_xls, projects_xls,
                                        references_xls, statements={})
        tasks_turtle = turtle_from_dict(tasks_statements)
    else:
        tasks_statements = []
        tasks_turtle = []

    if do_questions:
        questions_statements = ingest_questions(questions_xls,
            references_xls, statements={})
        questions_turtle = turtle_from_dict(questions_statements)
    else:
        questions_statements = []
        questions_turtle = []

    if do_dsm5:
        dsm5_statements = ingest_dsm5(dsm5_xls, references_xls, statements={})
        dsm5_turtle = turtle_from_dict(dsm5_statements)
    else:
        dsm5_statements = []
        dsm5_turtle = []

    if do_projects:
        projects_statements = ingest_projects(projects_xls,
                                              states_xls, measures_xls,
                                              references_xls, statements={})
        projects_turtle = turtle_from_dict(projects_statements)
    else:
        projects_statements = []
        projects_turtle = []

    if do_references:
        references_statements = ingest_references(references_xls, states_xls,
                                                  projects_xls, dsm5_xls,
                                                  statements={})
        references_turtle = turtle_from_dict(references_statements)
    else:
        references_statements = []
        references_turtle = []

    if do_claims:
        claims_statements = ingest_claims(claims_xls, states_xls, measures_xls,
                                          references_xls, statements={})
        claims_turtle = turtle_from_dict(claims_statements)
    else:
        claims_statements = []
        claims_turtle = []


    # --------------------------------------------------------------------------
    # Write header and statements to turtle files
    # --------------------------------------------------------------------------
    outputs_list = [[states_statements, states_outfile, states_turtle],
                    [behaviors_statements, behaviors_outfile, behaviors_turtle],
                    [measures_statements, measures_outfile, measures_turtle],
                    [tasks_statements, tasks_outfile, tasks_turtle],
                    [questions_statements, questions_outfile, questions_turtle],
                    [dsm5_statements, dsm5_outfile, dsm5_turtle],
                    [projects_statements, projects_outfile, projects_turtle],
                    [references_statements, references_outfile, references_turtle],
                    [claims_statements, claims_outfile, claims_turtle]]

    for ioutput, output_list in enumerate(outputs_list):

        out_statements = output_list[0]
        out_file = output_list[1]
        out_turtle = output_list[2]

        if out_statements not in X:

            # Create header with ontologies
            import_prefixes = set()
            for subject in out_statements:
                if ":" in subject and \
                "://" not in subject and \
                not subject.startswith('"'):
                    import_prefixes.add(subject.split(":")[0])
                for predicate in out_statements[subject]:
                    if ":" in predicate and \
                    "://" not in predicate and \
                    not predicate.startswith('"'):
                        import_prefixes.add(predicate.split(":")[0])
                    for object in out_statements[subject][predicate]:
                        if ":" in object and \
                        "://" not in object and \
                        not object.startswith('"'):
                            import_prefixes.add(object.split(":")[0])
            prefixes = [(
                row[1]["Prefix"],
                row[1]["PrefixURI"],
                row[1]["ImportURI"]
            ) for row in references_xls.parse(
                'ontologies'
            ).iterrows() if row[1]["Prefix"] in import_prefixes]


            if ioutput == 0:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "states"),
                    version,
                    "{0} â€” {1}".format(label, "Categories of mental phenomena"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tCategories of mental phenomena\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 1:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "behaviors"),
                    version,
                    "{0} â€” {1}".format(label, "Behaviors"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tBehaviors\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 2:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "measures"),
                    version,
                    "{0} â€” {1}".format(label, "Measures related to cognition, emotion, behavior, and physiology"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tMeasures related to cognition, emotion, behavior, and physiology\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 3:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "tasks"),
                    version,
                    "{0} â€” {1}".format(label, "Tasks to observe cognition, emotion, and behaviors"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tTasks to observe cognition, emotion, and behaviors\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 4:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "questions"),
                    version,
                    "{0} â€” {1}".format(label, "Questions from (primarily mental health) questionnaires"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tQuestions from (primarily mental health) questionnaires\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 5:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "dsm5"),
                    version,
                    "{0} â€” {1}".format(label, "DSM-5 signs and symptoms"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tDSM-5 signs and symptoms\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 6:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "projects"),
                    version,
                    "{0} â€” {1}".format(label, "Projects"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tProjects\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 7:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "references"),
                    version,
                    "{0} â€” {1}".format(label, "References"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tReferences\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 8:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "claims"),
                    version,
                    "{0} â€” {1}".format(label, "Claims"),
                    "\n".join([
                        comment,
                        "{0}\n\t\tClaims\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )

            fid = open(out_file, 'w')
            fid.write("@prefix owl: <http://www.w3.org/2002/07/owl#> .\n".format(out_turtle.rstrip(" .")))
            fid.write("@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n".format(out_turtle.rstrip(" .")))
            fid.write(header_string)
            fid.write("{0} .\n".format(out_turtle.rstrip(" .")))


if __name__ == "__main__":
    main()
