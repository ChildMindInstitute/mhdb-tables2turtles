#!/usr/bin/env python
"""
This program converts specific mental health spreadsheet workbooks to RDF
text documents. See header_comment below for more information.

The database is licensed under the terms of the Creative Commons BY license.
Current information can be found on the website, https://matter.childmind.org.

Authors:
    - Arno Klein, 2017-2020 (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017–2018 (jon.clucas@childmind.org)

Copyright 2020, Child Mind Institute MATTER Lab (https://matter.childmind.org),
Apache v2.0 License

"""


ddashes = "================================================================================"
header_comment="""\n\n{0}\n\t\tMental Health Database (MHDB)\n{0}
This mental health database interrelates information about:
  - Mental states
  - Mental health disorders
  - Mental health resources
  - Mental health assessments
  - Sensors and measures
The database is licensed under the terms of the Creative Commons BY license.
Current information can be found on the website, https://matter.childmind.org.
""".format(ddashes)


import os
import sys
mhdb_path = os.path.abspath(os.getcwd())
if mhdb_path not in sys.path:
    sys.path= [
        mhdb_path,
        *sys.path
    ]
try:
    from mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.ingest import *
    from mhdb.write_ttl import check_iri, turtle_from_dict, write_header
except:
    from mhdb.mhdb.info import __version__ as version
    from mhdb.spreadsheet_io import download_google_sheet
    from mhdb.mhdb.ingest import *
    from mhdb.mhdb.write_ttl import check_iri, turtle_from_dict, write_header
import numpy as np
import pandas as pd

run_all = 0
if run_all:
    do_states = 0
    do_disorders = 1
    do_resources = 1
    do_assessments = 1
    do_measures = 1
else:
    do_states = 0
    do_disorders = 1
    do_resources = 0
    do_assessments = 0
    do_measures = 0


def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    try:
        statesFILE = download_google_sheet(
            'data/states.xlsx',
            "11OkIWLwZYi9xkpuFODAKXQZHEFeMvYCQ8BTfIBKm0Z8"
        )
    except:
        statesFILE = 'data/states.xlsx'
    try:
        disordersFILE = download_google_sheet(
            'data/disorders.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        disordersFILE = 'data/disorders.xlsx'
    try:
        resourcesFILE = download_google_sheet(
            'data/resources.xlsx',
            "1LeLlrsvBWMYTTIXTVtkynmBzzb0Uzi1OwpRLfyRAwzM"
        )
    except:
        resourcesFILE = 'data/resources.xlsx'
    try:
        assessmentsFILE = download_google_sheet(
            'data/assessments.xlsx',
            "1VUf3XnieYThY8OA6JWtpNP4zI2xa9xak9LXuyH_PaoE"
        )
    except:
        assessmentsFILE = 'data/assessments.xlsx'
    try:
        measuresFILE = download_google_sheet(
            'data/claims.xlsx',
            "1ELaw79zmtmjmrg3J7slyoP-HXdfQRWa1Aqnbp50cmj8"
        )
    except:
        measuresFILE = 'data/measures.xlsx'


    # --------------------------------------------------------------------------
    # Import spreadsheets
    # --------------------------------------------------------------------------
    states_xls = pd.ExcelFile(statesFILE)
    states_outfile = os.path.join('../output', 'states.ttl')
    disorders_xls = pd.ExcelFile(disordersFILE)
    disorders_outfile = os.path.join('../output', 'disorders.ttl')
    resources_xls = pd.ExcelFile(resourcesFILE)
    resources_outfile = os.path.join('../output', 'resources.ttl')
    assessments_xls = pd.ExcelFile(assessmentsFILE)
    assessments_outfile = os.path.join('../output', 'assessments.ttl')
    measures_xls = pd.ExcelFile(measuresFILE)
    measures_outfile = os.path.join('../output', 'measures.ttl')


    # --------------------------------------------------------------------------
    # Create output RDF
    # --------------------------------------------------------------------------
    if do_states:
        states_statements = ingest_states(states_xls, shared_xls,
                                          statements={})
        states_turtle = turtle_from_dict(states_statements)
    else:
        states_statements = []
        states_turtle = []

    if do_disorders:
        disorders_statements = ingest_disorders(disorders_xls, shared_xls, statements={})
        disorders_turtle = turtle_from_dict(disorders_statements)
    else:
        disorders_statements = []
        disorders_turtle = []

    if do_resources:
        resources_statements = ingest_resources(resources_xls,
                                              states_xls, measures_xls,
                                              shared_xls, statements={})
        resources_turtle = turtle_from_dict(resources_statements)
    else:
        resources_statements = []
        resources_turtle = []

    if do_assessments:
        assessments_statements = ingest_assessments(assessments_xls,
            shared_xls, statements={})
        assessments_turtle = turtle_from_dict(assessments_statements)
    else:
        assessments_statements = []
        assessments_turtle = []

    if do_measures:
        measures_statements = ingest_measures(measures_xls, shared_xls,
                                              statements={})
        measures_turtle = turtle_from_dict(measures_statements)
    else:
        measures_statements = []
        measures_turtle = []

    # --------------------------------------------------------------------------
    # Write header and statements to turtle files
    # --------------------------------------------------------------------------
    label = "MHDB"
    base_uri = "http://www.purl.org/mentalhealth"
    base_prefix = "mhdb"
    X = ['', 'nan', np.nan, 'None', None, []]

    outputs_list = [[states_statements, states_outfile, states_turtle],
                    [disorders_statements, disorders_outfile, disorders_turtle],
                    [resources_statements, resources_outfile, resources_turtle],
                    [assessments_statements, assessments_outfile, assessments_turtle],
                    [measures_statements, measures_outfile, measures_turtle]]

    for ioutput, output_list in enumerate(outputs_list):

        out_statements = output_list[0]
        out_file = output_list[1]
        out_turtle = output_list[2]

        if out_statements not in X:

            # Create header with ontologies
            import_prefixes = set()
            for subject in out_statements:
                if ":" in subject and \
                "://" not in subject and \
                not subject.startswith('"'):
                    import_prefixes.add(subject.split(":")[0])
                for predicate in out_statements[subject]:
                    if ":" in predicate and \
                    "://" not in predicate and \
                    not predicate.startswith('"'):
                        import_prefixes.add(predicate.split(":")[0])
                    for object in out_statements[subject][predicate]:
                        if ":" in object and \
                        "://" not in object and \
                        not object.startswith('"'):
                            import_prefixes.add(object.split(":")[0])
            prefixes = [(
                row[1]["Prefix"],
                row[1]["PrefixURI"],
                row[1]["ImportURI"]
            ) for row in resources_xls.parse(
                'ontologies'
            ).iterrows() if row[1]["Prefix"] in import_prefixes and
                            row[1]["Prefix"] not in ["mhdb"]]

            header_string = ""
            if ioutput == 0:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "states#"), base_prefix,
                    version,
                    "{0} — {1}".format(label, "Categories of mental phenomena"),
                    "\n".join([
                        header_comment,
                        "{0}\n\t\tCategories of mental phenomena\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 1:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "disorders#"), base_prefix,
                    version,
                    "{0} — {1}".format(label, "Signs and symptoms from the Diagnostic and Statistical Manual of Mental Disorders (DSM-5)"),
                    "\n".join([
                        header_comment,
                        "{0}\n\t\tSigns and symptoms from the Diagnostic and Statistical Manual of Mental Disorders (DSM-5)\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 2:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "resources#"), base_prefix,
                    version,
                    "{0} — {1}".format(label, "Projects related to mental health"),
                    "\n".join([
                        header_comment,
                        "{0}\n\t\tProjects related to mental health\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 3:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "assessments#"), base_prefix,
                    version,
                    "{0} — {1}".format(label, "Questions from (primarily mental health) questionnaires"),
                    "\n".join([
                        header_comment,
                        "{0}\n\t\tQuestions from (primarily mental health) questionnaires\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )
            if ioutput == 4:
                header_string = write_header(
                    "{0}/{1}".format(base_uri, "measures#"), base_prefix,
                    version,
                    "{0} — {1}".format(label, "Measures related to cognition, emotion, behavior, and physiology"),
                    "\n".join([
                        header_comment,
                        "{0}\n\t\tMeasures related to cognition, emotion, behavior, and physiology\n{0}\n\n".format(ddashes)
                    ]),
                    prefixes=prefixes
                )

            fid = open(out_file, 'w')
            fid.write("@prefix owl: <http://www.w3.org/2002/07/owl#> .\n")
            fid.write("@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n")
            fid.write("@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n")
            fid.write(header_string)
            fid.write(out_turtle)


if __name__ == "__main__":
    main()
