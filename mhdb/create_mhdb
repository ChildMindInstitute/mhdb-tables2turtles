#!/usr/bin/env python
"""
This is a program to convert a mental health spreadsheet to RDF.

Authors:
    - Arno Klein, 2017  (arno@childmind.org)  http://binarybottle.com

Copyright 2017, Child Mind Institute (http://childmind.org), Apache v2.0 License

"""
import os
import argparse
import pandas as pd
#import rdflib

from mhdb.info import __version__ as version
from mhdb.info import long_description as comment
from mhdb.info import description as label
from mhdb.owl_boilerplate import convert_string_to_label, get_definition, \
    print_header, print_object_properties_header, \
    print_data_properties_header, print_classes_header, \
    print_general_axioms_header, print_object_property, print_data_property, \
    print_class, print_general_axioms

# ------------------------------------------------------------------------------
# Command-line arguments
# ------------------------------------------------------------------------------
debug = True
if debug:
    FILE = '/data/mentalhealth.xlsx'
    base_uri = "http://www.purl.org/mentalhealth"
    outfile = os.path.join(os.getcwd(), 'mhdb.ttl')
else:
    parser = argparse.ArgumentParser(description="""
                This program converts a mental health spreadsheet to RDF.""",
                                     formatter_class = lambda prog:
                                     argparse.HelpFormatter(prog,
                                                            max_help_position=40))
    rec_args = parser.add_argument_group('recommended arguments')

    # "positional arguments":
    parser.add_argument("FILE", help=("spreadsheet file path"))
    # "optional arguments":
    parser.add_argument("-b", "--base_uri", help="name of base URL",
                        default='http://purl.com/mentalhealth', metavar='STR')
    parser.add_argument("-o", "--outfile", help="name of output file",
                        default=os.path.join(os.getcwd(), 'mhdb.ttl'),
                        metavar='STR')
    args = parser.parse_args()
    FILE = args.FILE
    base_uri = args.base_uri

# ------------------------------------------------------------------------------
# Import spreadsheet
# ------------------------------------------------------------------------------
xls = pd.ExcelFile(FILE)
exclude = ['', 'nan']

# ------------------------------------------------------------------------------
# Create output RDF file and print header
# ------------------------------------------------------------------------------
fid = open(outfile, 'w')
header_string = print_header(base_uri, version, label, comment)
fid.write(header_string)

# ------------------------------------------------------------------------------
# Extract worksheets as pandas dataframes
# ------------------------------------------------------------------------------
Classes = xls.parse("Classes")
Properties = xls.parse("Properties")

Disorder = xls.parse("Disorder")
DiagnosticCriterion = xls.parse("DiagnosticCriterion")
DisorderSeverity = xls.parse("DisorderSeverity")
DisorderCategory0 = xls.parse("DisorderCategory")
DisorderCategory1 = xls.parse("DisorderSubcategory")
DisorderCategory2 = xls.parse("DisorderSubsubcategory")
DisorderCategory3 = xls.parse("DisorderSubsubsubcategory")
DiagnosticSpecifier = xls.parse("DiagnosticSpecifier")

Symptom = xls.parse("Symptom")
SymptomCategory = xls.parse("SymptomCategory")

Reference = xls.parse("Reference")
ReferenceType = xls.parse("ReferenceType")

Questionnaire = xls.parse("Questionnaire")
Question = xls.parse("Question")
QuestionCategory = xls.parse("QuestionCategory")
AnswerType = xls.parse("AnswerType")
ChildMindInstituteCategory = xls.parse("ChildMindInstituteCategory")

# ------------------------------------------------------------------------
# Print object properties
# ------------------------------------------------------------------------
object_properties_header = print_object_properties_header()
fid.write(object_properties_header)
for i, object_property_name in enumerate(Properties.PropertyName):

    property_definition = get_definition(worksheet=Properties, 
                                         worksheet2=Reference, 
                                         index=i,
                                         exclude=exclude)
    equivalentClass = Properties.equivalentClass.iloc[[i][0]]
    subClassOf = Properties.subClassOf.iloc[[i][0]]
    property_domain = Properties.propertyDomain.iloc[[i][0]]
    property_range = Properties.propertyRange.iloc[[i][0]]
    if equivalentClass in exclude:
        equivalentClass = ''
    if subClassOf in exclude:
        subClassOf = ''
    if property_domain in exclude:
        property_domain = ''
    if property_range in exclude:
        property_range = ''

    object_property_string = print_object_property(
        property_name=convert_string_to_label(object_property_name),
        label = object_property_name,
        comment = property_definition,
        equivalentURI=equivalentClass,
        subClassOf_uri=subClassOf,
        domain=property_domain,
        range=property_range,
        exclude=exclude)
    fid.write(object_property_string)

# ------------------------------------------------------------------------
# Print data properties
# ------------------------------------------------------------------------
data_properties_header = print_data_properties_header()
fid.write(data_properties_header)
for i, data_property_name in enumerate(Classes.ClassName):

    class_definition = get_definition(worksheet=Classes, 
                                      worksheet2=Reference, 
                                      index=i,
                                      exclude=exclude)
    equivalentClass = Classes.equivalentClass.iloc[[i][0]]
    subClassOf = Classes.subClassOf.iloc[[i][0]]
    if equivalentClass in exclude:
        equivalentClass = ''
    if subClassOf in exclude:
        subClassOf = ''

    data_property_string = print_data_property(
        property_name=convert_string_to_label(data_property_name),
        label=data_property_name,
        comment=class_definition,
        equivalentURI=equivalentClass,
        subClassOf_uri=subClassOf,
        exclude=exclude)
    fid.write(data_property_string)

# ----------------------------------------------------------------------------
# Print classes related to mental health disorders
# ----------------------------------------------------------------------------
classes_header = print_classes_header('Disorder')
fid.write(classes_header)

# ----------------------------------------------------------------------------
# Disorder [Category, Subcategory, Subsubcategory, Subsubsubcategory] classes
# ----------------------------------------------------------------------------
for i4, disorder in enumerate(Disorder.DisorderName):
    i0 = Disorder.DisorderCategory_index.iloc[[i4][0]]
    i1 = Disorder.DisorderSubcategory_index.iloc[[i4][0]]
    i2 = Disorder.DisorderSubsubcategory_index.iloc[[i4][0]]
    i3 = Disorder.DisorderSubsubsubcategory_index.iloc[[i4][0]]

    # Category:
    try:
        index = pd.Index(DisorderCategory0['index']).get_loc(i0)
        label = DisorderCategory0.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index, 
                                   worksheet=DisorderCategory0,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
        category0_uri = "{0}#{1}".format(base_uri, label_safe)
        disorder_superClass_uri = category0_uri
    except:
        category0_uri = ''
        disorder_superClass_uri = ''

    # Subcategory:
    try:
        index = pd.Index(DisorderCategory1['index']).get_loc(i1)
        label = DisorderCategory1.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DisorderCategory1,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
        disorder_superClass_uri = "{0}#{1}".format(base_uri, label_safe)
    except:
        pass

    # Subsubcategory:
    try:
        index = pd.Index(DisorderCategory2['index']).get_loc(i2)
        label = DisorderCategory2.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DisorderCategory2,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
        disorder_superClass_uri = "{0}#{1}".format(base_uri, label_safe)
    except:
        pass

    # Subsubsubcategory:
    try:
        index = pd.Index(DisorderCategory3['index']).get_loc(i3)
        label = DisorderCategory3.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DisorderCategory3,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
        disorder_superClass_uri = "{0}#{1}".format(base_uri, label_safe)
    except:
        pass

    # ------------------------------------------------------------------------
    # Disorder classes: Use ICD-10 code's URI as an equivalentURI disorder
    # ------------------------------------------------------------------------
    try:
        label_safe = convert_string_to_label(disorder)
        disorder_uri = "{0}#{1}".format(base_uri, label_safe)
        ICD9 = Disorder.ICD9code.iloc[[i4][0]]
        ICD10 = Disorder.ICD10code.iloc[[i4][0]]
        if ICD10:
            ICD_uri = "http://purl.bioontology.org/ontology/ICD10CM/" + \
                      str(ICD10)
        else:
            ICD_uri = ''
        class_string = print_class(class_name=label_safe, 
                                   label=disorder,
                                   comment='',
                                   index=i4,
                                   worksheet=Disorder,
                                   worksheet2=Reference,
                                   equivalentClass=ICD_uri,
                                   subClassOf=disorder_superClass_uri,
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

    # DiagnosticSpecifier class:
    ispecifier = Disorder.DiagnosticSpecifier_index.iloc[[i4][0]]
    iinclusion1 = Disorder.DiagnosticInclusionCriterion_index.iloc[[i4][0]]
    iinclusion2 = Disorder.DiagnosticInclusionCriterion2_index.iloc[[i4][0]]
    iexclusion1 = Disorder.DiagnosticExclusionCriterion_index.iloc[[i4][0]]
    iexclusion2 = Disorder.DiagnosticExclusionCriterion2_index.iloc[[i4][0]]
    iseverity = Disorder.DisorderSeverity_index.iloc[[i4][0]]
    try:
        index = pd.Index(DiagnosticSpecifier['index']).get_loc(ispecifier)
        label = DiagnosticSpecifier.DiagnosticSpecifierName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

    # In/ExclusionCriterion classes:
    try:
        index = pd.Index(DiagnosticCriterion['index']).get_loc(iinclusion1)
        label = DiagnosticCriterion.DiagnosticCriterionName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass
    try:
        index = pd.Index(DiagnosticCriterion['index']).get_loc(iinclusion2)
        label = DiagnosticCriterion.DiagnosticCriterionName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass
    try:
        index = pd.Index(DiagnosticCriterion['index']).get_loc(iexclusion1)
        label = DiagnosticCriterion.DiagnosticCriterionName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass
    try:
        index = pd.Index(DiagnosticCriterion['index']).get_loc(iexclusion2)
        label = DiagnosticCriterion.DiagnosticCriterionName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

    # DisorderSeverity class:
    try:
        index = pd.Index(DisorderSeverity['index']).get_loc(iseverity)
        label = DisorderSeverity.DisorderSeverityName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe, 
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

# ----------------------------------------------------------------------------
# Print classes related to mental health symptoms
# ----------------------------------------------------------------------------
classes_header = print_classes_header('Symptom')
fid.write(classes_header)
for i5, symptom in enumerate(Symptom.SymptomName):

    # Symptom:
    try:
        label_safe = convert_string_to_label(symptom)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

    # SymptomCategory:
    try:
        isymptomcat = Symptom.SymptomCategory_index.iloc[[i5][0]]
        index = pd.Index(SymptomCategory['index']).get_loc(isymptomcat)
        label = SymptomCategory.SymptomCategoryName[index]
        label_safe = convert_string_to_label(label)
        class_string = print_class(class_name=label_safe,
                                   label=label,
                                   comment='',
                                   index=index,
                                   worksheet=DiagnosticSpecifier,
                                   worksheet2=Reference,
                                   equivalentClass='',
                                   subClassOf='',
                                   exclude=exclude)
        fid.write(class_string)
    except:
        pass

# ----------------------------------------------------------------------------
# Print classes related to mental health questions (from the questionnaires)
# ----------------------------------------------------------------------------
classes_header = print_classes_header('Question')
fid.write(classes_header)
for i6, question in enumerate(Question.QuestionText):
    if question not in exclude:

        # QuestionText:
        try:
            question_safe = convert_string_to_label(question)
            class_string = print_class(class_name=question_safe,
                                       label=question,
                                       comment='',
                                       index=None,
                                       worksheet=None,
                                       worksheet2=None,
                                       equivalentClass='',
                                       subClassOf='',
                                       exclude=exclude)
            fid.write(class_string)
        except:
            pass

        # Followup QuestionText:
        try:
            question2 = Question.Question2Text.iloc[[i6][0]]
            question2_safe = convert_string_to_label(question2)
            if question2_safe not in exclude:
                class_string = print_class(class_name=question2_safe,
                                           label=question2,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # AnswerText:
        try:
            label = Question.AnswerText.iloc[[i6][0]]
            label_safe = convert_string_to_label(label)
            if label_safe not in exclude:
                class_string = print_class(class_name=label_safe,
                                           label=label,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # Followup AnswerText:
        try:
            label = Question.Answer2Text.iloc[[i6][0]]
            label_safe = convert_string_to_label(label)
            if label_safe not in exclude:
                class_string = print_class(class_name=label_safe,
                                           label=label,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # AnswerType:
        try:
            ianswertype = Question.AnswerType_index.iloc[[i6][0]]
            index = pd.Index(AnswerType['index']).get_loc(ianswertype)
            label = AnswerType.AnswerTypeName[index]
            label_safe = convert_string_to_label(label)
            if label_safe not in exclude:
                class_string = print_class(class_name=label_safe,
                                           label=label,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # Followup AnswerType:
        try:
            ianswer2type = Question.Answer2Type_index.iloc[[i6][0]]
            index = pd.Index(AnswerType['index']).get_loc(ianswer2type)
            label = AnswerType.Answer2TypeName[index]
            label_safe = convert_string_to_label(label)
            if label_safe not in exclude:
                class_string = print_class(class_name=label_safe,
                                           label=label,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # QuestionCategory:
        try:
            iqcat = Question.QuestionCategory_index.iloc[[i6][0]]
            index = pd.Index(QuestionCategory['index']).get_loc(iqcat)
            label = QuestionCategory.QuestionCategoryName[index]
            label_safe = convert_string_to_label(label)
            if label_safe not in exclude:
                class_string = print_class(class_name=label_safe,
                                           label=label,
                                           comment='',
                                           index=None,
                                           worksheet=None,
                                           worksheet2=None,
                                           equivalentClass='',
                                           subClassOf='',
                                           exclude=exclude)
                fid.write(class_string)
        except:
            pass

        # Questionnaire (Reference):
#    iqref = Question.Reference_index.iloc[[i6][0]]
#    index = pd.Index(Reference['index']).get_loc(iqref)
#    qreference = Reference.ReferenceLink[index]
#    fid.write(class_string)

# ----------------------------------------------------------------------------
# Print general axioms
# ----------------------------------------------------------------------------
general_axioms_header = print_general_axioms_header()
general_axioms_string = print_general_axioms(disjoint_classes_list=[])
fid.write(general_axioms_header)
fid.write(general_axioms_string)

# ============================================================================
# Doctests
# ============================================================================
if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True)
