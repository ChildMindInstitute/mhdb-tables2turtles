#!/usr/bin/env python
"""
This is a program to convert a mental health spreadsheet to RDF.

Authors:
    - Arno Klein, 2017  (arno@childmind.org)  http://binarybottle.com

Copyright 2017, Child Mind Institute (http://childmind.org), Apache v2.0 License

"""
import os
import argparse
import pandas as pd
#import rdflib

from mhdb.info import __version__ as version
from mhdb.info import long_description as comment
from mhdb.info import description as label
from mhdb.owl_boilerplate import convert_string_to_label, safestr, \
    build_owl_string, print_header, print_subheader, print_general_axioms

# ------------------------------------------------------------------------------
# Command-line arguments
# ------------------------------------------------------------------------------
debug = True
if debug:
    FILE = '/data/mentalhealth.xlsx'
    base_uri = "http://www.purl.org/mentalhealth"
    outfile = os.path.join(os.getcwd(), 'mhdb.ttl')
else:
    parser = argparse.ArgumentParser(description="""
                This program converts a mental health spreadsheet to RDF.""",
                                     formatter_class = lambda prog:
                                     argparse.HelpFormatter(prog,
                                                            max_help_position=40))
    rec_args = parser.add_argument_group('recommended arguments')

    # "positional arguments":
    parser.add_argument("FILE", help=("spreadsheet file path"))
    # "optional arguments":
    parser.add_argument("-b", "--base_uri", help="name of base URL",
                        default='http://purl.com/mentalhealth', metavar='STR')
    parser.add_argument("-o", "--outfile", help="name of output file",
                        default=os.path.join(os.getcwd(), 'mhdb.ttl'),
                        metavar='STR')
    args = parser.parse_args()
    FILE = args.FILE
    base_uri = args.base_uri

# ------------------------------------------------------------------------------
# Import spreadsheet
# ------------------------------------------------------------------------------
xls = pd.ExcelFile(FILE)
X = ['', 'nan', 'None', None]

# ------------------------------------------------------------------------------
# Create output RDF file and print header
# ------------------------------------------------------------------------------
fid = open(outfile, 'w')
header_string = print_header(base_uri, version, label, comment)
fid.write(header_string)

# ------------------------------------------------------------------------------
# Extract worksheets as pandas dataframes
# ------------------------------------------------------------------------------
Classes = xls.parse("Classes")
Properties = xls.parse("Properties")

Disorder = xls.parse("Disorder")
DiagnosticCriterion = xls.parse("DiagnosticCriterion")
DisorderSeverity = xls.parse("DisorderSeverity")
DisorderCategory0 = xls.parse("DisorderCategory")
DisorderCategory1 = xls.parse("DisorderSubcategory")
DisorderCategory2 = xls.parse("DisorderSubsubcategory")
DisorderCategory3 = xls.parse("DisorderSubsubsubcategory")
DiagnosticSpecifier = xls.parse("DiagnosticSpecifier")

Symptom = xls.parse("Symptom")
SymptomCategory = xls.parse("SymptomCategory")

Reference = xls.parse("Reference")
ReferenceType = xls.parse("ReferenceType")

Questionnaire = xls.parse("Questionnaire")
Question = xls.parse("Question")
QuestionCategory = xls.parse("QuestionCategory")
AnswerType = xls.parse("AnswerType")
ChildMindInstituteCategory = xls.parse("ChildMindInstituteCategory")

# ------------------------------------------------------------------------
# Properties
# ------------------------------------------------------------------------
subheader = print_subheader('Properties')
fid.write(subheader)
for index, label in enumerate(Properties.PropertyName):
    label_safe = convert_string_to_label(label)
    owl_string = build_owl_string(uri_stem=label_safe, 
                                  owl_type='ObjectProperty', 
                                  label=label,
                                  comment=None,
                                  index=index,
                                  worksheet=Properties,
                                  worksheet2=Reference,
                                  equivalent_class_uri=None,
                                  subclassof_uri=None,
                                  property_domain=None,
                                  property_range=None,
                                  exclude=X)
    fid.write(owl_string)
    exec("{0}_uri = ':{0}'".format(label_safe))

# ------------------------------------------------------------------------
# Objects
# ------------------------------------------------------------------------
subheader = print_subheader('Classes')
fid.write(subheader)
for index, label in enumerate(Classes.ClassName):
    label_safe = convert_string_to_label(label)
    owl_string = build_owl_string(uri_stem=label_safe,
                                  owl_type='ObjectProperty',
                                  label=label,
                                  comment=None,
                                  index=index,
                                  worksheet=Classes,
                                  worksheet2=Reference,
                                  equivalent_class_uri=None,
                                  subclassof_uri=None,
                                  property_domain=None,
                                  property_range=None,
                                  exclude=X)
    fid.write(owl_string)
    exec("{0}_uri = ':{0}'".format(label_safe))

# ----------------------------------------------------------------------------
# Classes and triples related to mental health disorders
# ----------------------------------------------------------------------------
fid.write(print_subheader('Disorder classes and triples'))

# ----------------------------------------------------------------------------
# Disorder [Category, Subcategory, Subsubcategory, Subsubsubcategory] classes
# ----------------------------------------------------------------------------
disorder_list = []
category3_list = []
category2_list = []
category1_list = []
category0_list = []
specifier_list = []
include1_list = []
include2_list = []
exclude1_list = []
exclude2_list = []
severity_list = []

for i4, disorder in enumerate(Disorder.DisorderName):
    i0 = safestr(Disorder.DisorderCategory_index[i4], X)
    i1 = safestr(Disorder.DisorderSubcategory_index[i4], X)
    i2 = safestr(Disorder.DisorderSubsubcategory_index[i4], X)
    i3 = safestr(Disorder.DisorderSubsubsubcategory_index[i4], X)

    # Category:
    try:
        index = pd.Index(DisorderCategory0['index']).get_loc(i0)
        label = DisorderCategory0.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        category0_uri = ":{0}".format(label_safe)
        if label_safe not in category0_list:
            category0_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=label,
                                          comment=None,
                                          index=index,
                                          worksheet=DisorderCategory0,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=MentalDisorder_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        superClass_uri = category0_uri
    except:
        category0_uri = ''
        superClass_uri = ''

    # Subcategory:
    try:
        index = pd.Index(DisorderCategory1['index']).get_loc(i1)
        label = DisorderCategory1.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        if label_safe not in category1_list:
            category1_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=label,
                                          comment=None,
                                          index=index,
                                          worksheet=DisorderCategory1,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=category0_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        category1_uri = ":{0}".format(label_safe)
        superClass_uri = category1_uri
    except:
        category1_uri = ''

    # Subsubcategory:
    try:
        index = pd.Index(DisorderCategory2['index']).get_loc(i2)
        label = DisorderCategory2.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        if label_safe not in category2_list:
            category2_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=label,
                                          comment=None,
                                          index=index,
                                          worksheet=DisorderCategory2,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=category1_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        category2_uri = ":{0}".format(label_safe)
        superClass_uri = category2_uri
    except:
        category2_uri = ''

    # Subsubsubcategory:
    try:
        index = pd.Index(DisorderCategory3['index']).get_loc(i3)
        label = DisorderCategory3.DisorderCategoryName[index]
        label_safe = convert_string_to_label(label)
        if label_safe not in category3_list:
            category3_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=label,
                                          comment=None,
                                          index=index,
                                          worksheet=DisorderCategory3,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=category2_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        category3_uri = ":{0}".format(label_safe)
        superClass_uri = category3_uri
    except:
        category3_uri = ''

    # Disorder class: Use ICD-10 code's URI as an equivalentClass disorder
    try:
        label_safe = convert_string_to_label(disorder)
        if label_safe not in disorder_list:
            disorder_list.append(label_safe)
            ICD10code = safestr(Disorder.ICD10code[i4], X)[0]
            if ICD10code not in X:
                ICD_base_uri = "http://purl.bioontology.org/ontology/ICD10CM/"
                ICD_uri = ICD_base_uri + ICD10code
            else:
                ICD_uri = None
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=disorder,
                                          comment=None,
                                          index=i4,
                                          worksheet=Disorder,
                                          worksheet2=Reference,
                                          equivalent_class_uri=ICD_uri,
                                          subclassof_uri=superClass_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
            #exec("{0}_uri = ':{0}'".format(label_safe))
        disorder_uri = ":{0}".format(label_safe)
        disorder_superClass_uri = disorder_uri

        # Indices to other Disorder worksheet columns:
        ispecfr = safestr(Disorder.DiagnosticSpecifier_index[i4], X)
        inclsn1 = safestr(Disorder.DiagnosticInclusionCriterion_index[i4], X)
        inclsn2 = safestr(Disorder.DiagnosticInclusionCriterion2_index[i4], X)
        ixclsn1 = safestr(Disorder.DiagnosticExclusionCriterion_index[i4], X)
        ixclsn2 = safestr(Disorder.DiagnosticExclusionCriterion2_index[i4], X)
        isevrty = safestr(Disorder.DisorderSeverity_index[i4], X)

        # DiagnosticSpecifier class:
        try:
            index = pd.Index(DiagnosticSpecifier['index']).get_loc(ispecfr)
            label, label_safe = safestr(
                DiagnosticSpecifier.DiagnosticSpecifierName[index], X)
            if label_safe not in specifier_list:
                specifier_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DiagnosticSpecifier,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                specifier_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasDiagnosticSpecifier_uri,
                                                 specifier_uri))
        except:
            specifier_uri = None

        # In/ExclusionCriterion classes:
        try:
            index = pd.Index(DiagnosticCriterion['index']).get_loc(inclsn1)
            label, label_safe = safestr(
                DiagnosticCriterion.DiagnosticCriterionName[index], X)
            if label_safe not in include1_list:
                include1_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DiagnosticCriterion,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                inclusion1_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasInclusionCriterion_uri,
                                                 inclusion1_uri))
        except:
            pass
        try:
            index = pd.Index(DiagnosticCriterion['index']).get_loc(inclsn2)
            label, label_safe = safestr(
                DiagnosticCriterion.DiagnosticCriterionName[index], X)
            if label_safe not in include2_list:
                include2_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DiagnosticCriterion,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                inclusion2_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasInclusionCriterion_uri,
                                                 inclusion2_uri))
        except:
            pass
        try:
            index = pd.Index(DiagnosticCriterion['index']).get_loc(ixclsn1)
            label, label_safe = safestr(
                DiagnosticCriterion.DiagnosticCriterionName[index], X)
            if label_safe not in exclude1_list:
                exclude1_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DiagnosticCriterion,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                exclusion1_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasExclusionCriterion_uri,
                                                 exclusion1_uri))
        except:
            pass
        try:
            index = pd.Index(DiagnosticCriterion['index']).get_loc(ixclsn2)
            label, label_safe = safestr(
                DiagnosticCriterion.DiagnosticCriterionName[index], X)
            if label_safe not in exclude2_list:
                exclude2_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DiagnosticCriterion,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                exclusion2_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasExclusionCriterion_uri,
                                                 exclusion2_uri))
        except:
            pass

        # DisorderSeverity class:
        try:
            index = pd.Index(DisorderSeverity['index']).get_loc(isevrty)
            label, label_safe = safestr(
                DisorderSeverity.DisorderSeverityName[index], X)
            if label_safe not in severity_list:
                severity_list.append(label_safe)
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=DisorderSeverity,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
                severity_uri = ":{0}".format(label_safe)
                fid.write("{0} {1} {2}\n".format(disorder_uri,
                                                 hasSeverity_uri,
                                                 severity_uri))
        except:
            pass
    except:
        disorder_uri = ''

# ----------------------------------------------------------------------------
# Symptom classes
# ----------------------------------------------------------------------------
fid.write(print_subheader('Symptom classes and triples'))

symptom_list = []
symptomcategory_list = []
for i5, symptom in enumerate(Symptom.SymptomName):

    # SymptomCategory:
    try:
        isymptomcat = safestr(Symptom, 'SymptomCategory_index', i5, X)
        index = pd.Index(SymptomCategory['index']).get_loc(isymptomcat)
        label, label_safe = safestr(
            SymptomCategory.SymptomCategoryName[index], X)
        if label_safe not in symptomcategory_list:
            symptomcategory_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=label,
                                          comment=None,
                                          index=index,
                                          worksheet=SymptomCategory,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=None,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
            isymcatdis = safestr(
                SymptomCategory.Disorder_index[i5], X)
            index = pd.Index(Disorder['index']).get_loc(isymcatdis)
            disnam, disnam_safe = safestr(
                Disorder.DisorderName[index], X)
            disorder_for_symptom_uri = ":{0}".format(disnam_safe)
            symptom_category_uri = ":{0}".format(label_safe)
            fid.write("{0} {1} {2}\n".format(symptom_category_uri,
                                             'rdf:type',
                                             Symptom_uri))
            fid.write("{0} {1} {2}\n".format(disorder_for_symptom_uri,
                                             hasSymptom_uri,
                                             symptom_category_uri))
    except:
        symptom_category_uri = None

    # Symptom:
    try:
        label_safe = convert_string_to_label(symptom)
        if label_safe not in symptom_list:
            symptom_list.append(label_safe)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=symptom,
                                          comment=None,
                                          index=index,
                                          worksheet=Symptom,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=symptom_category_uri,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
    except:
        pass

# ----------------------------------------------------------------------------
# Questions/questionnaire classes
# ----------------------------------------------------------------------------
fid.write(print_subheader('Question classes and triples'))

answertype_list = []
questioncategory_list = []
for i6, question in enumerate(Question.QuestionText):
    if question not in X:

        # QuestionText:
        try:
            label_safe = convert_string_to_label(question)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=question,
                                          comment=None,
                                          index=index,
                                          worksheet=Question,
                                          worksheet2=Reference,
                                          equivalent_class_uri=None,
                                          subclassof_uri=None,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        except:
            pass

        # Followup QuestionText:
        try:
            label, label_safe = safestr(Question.Question2Text[i6], X)
            if label_safe not in X:
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=Question,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
        except:
            pass

        # # AnswerText:
        # try:
        #     label, label_safe = safestr(Question.AnswerText[i6], X)
        #     if label_safe not in X:
        #         owl_string = build_owl_string(uri_stem=label_safe,
        #                                       owl_type='Class',
        #                                       label=label,
        #                                       comment=None,
        #                                       index=index,
        #                                       worksheet=Question,
        #                                       worksheet2=Reference,
        #                                       equivalent_class_uri=None,
        #                                       subclassof_uri=None,
        #                                       property_domain=None,
        #                                       property_range=None,
        #                                       exclude=X)
        #         fid.write(owl_string)
        # except:
        #     pass
        #
        # # Followup AnswerText:
        # try:
        #     label, label_safe = safestr(Question.Answer2Text[i6], X)
        #     if label_safe not in X:
        #         owl_string = build_owl_string(uri_stem=label_safe,
        #                                       owl_type='Class',
        #                                       label=label,
        #                                       comment=None,
        #                                       index=index,
        #                                       worksheet=Question,
        #                                       worksheet2=Reference,
        #                                       equivalent_class_uri=None,
        #                                       subclassof_uri=None,
        #                                       property_domain=None,
        #                                       property_range=None,
        #                                       exclude=X)
        #         fid.write(owl_string)
        # except:
        #     pass

        # AnswerType:
        try:
            ianswertype = Question.AnswerType_index.iloc[[i6][0]]
            index = pd.Index(AnswerType['index']).get_loc(ianswertype)
            label, label_safe = safestr(AnswerType.AnswerTypeName[index], X)
            if label_safe not in X:
                if label_safe not in answertype_list:
                    owl_string = build_owl_string(uri_stem=label_safe,
                                                  owl_type='Class',
                                                  label=label,
                                                  comment=None,
                                                  index=index,
                                                  worksheet=AnswerType,
                                                  worksheet2=Reference,
                                                  equivalent_class_uri=None,
                                                  subclassof_uri=None,
                                                  property_domain=None,
                                                  property_range=None,
                                                  exclude=X)
                    fid.write(owl_string)
                    answertype_list.append(label_safe)
        except:
            pass

        # Followup AnswerType:
        try:
            ianswer2type = Question.Answer2Type_index.iloc[[i6][0]]
            index = pd.Index(AnswerType['index']).get_loc(ianswer2type)
            label, label_safe = safestr(AnswerType.Answer2TypeName[index], X)
            if label_safe not in X:
                if label_safe not in answertype_list:
                    owl_string = build_owl_string(uri_stem=label_safe,
                                                  owl_type='Class',
                                                  label=label,
                                                  comment=None,
                                                  index=index,
                                                  worksheet=AnswerType,
                                                  worksheet2=Reference,
                                                  equivalent_class_uri=None,
                                                  subclassof_uri=None,
                                                  property_domain=None,
                                                  property_range=None,
                                                  exclude=X)
                    fid.write(owl_string)
                    answertype_list.append(label_safe)
        except:
            pass

        # QuestionCategory:
        try:
            iqcat = Question.QuestionCategory_index.iloc[[i6][0]]
            index = pd.Index(QuestionCategory['index']).get_loc(iqcat)
            label, label_safe = safestr(
                QuestionCategory.QuestionCategoryName[index], X)
            if label_safe not in X:
                if label_safe not in questioncategory_list:
                    owl_string = build_owl_string(uri_stem=label_safe,
                                                  owl_type='Class',
                                                  label=label,
                                                  comment=None,
                                                  index=index,
                                                  worksheet=QuestionCategory,
                                                  worksheet2=Reference,
                                                  equivalent_class_uri=None,
                                                  subclassof_uri=None,
                                                  property_domain=None,
                                                  property_range=None,
                                                  exclude=X)
                    fid.write(owl_string)
                    questioncategory_list.append(label_safe)
        except:
            pass

        # Questionnaire (Reference):
#    iqref = Question.Reference_index.iloc[[i6][0]]
#    index = pd.Index(Reference['index']).get_loc(iqref)
#    qreference = Reference.ReferenceLink[index]
#    fid.write(owl_string)

# ----------------------------------------------------------------------------
# Reference classes and triples
# ----------------------------------------------------------------------------
fid.write(print_subheader('Reference classes and triples'))
for i7, reference in enumerate(Reference.ReferenceName):
    if reference not in X:

        try:
            label_safe = convert_string_to_label(reference)
            owl_string = build_owl_string(uri_stem=label_safe,
                                          owl_type='Class',
                                          label=reference,
                                          comment=None,
                                          index=index,
                                          worksheet=Reference,
                                          worksheet2=None,
                                          equivalent_class_uri=None,
                                          subclassof_uri=None,
                                          property_domain=None,
                                          property_range=None,
                                          exclude=X)
            fid.write(owl_string)
        except:
            pass

        try:
            ireftype = Reference.ReferenceType_index.iloc[[i7][0]]
            index = pd.Index(ReferenceType['index']).get_loc(ireftype)
            label, label_safe = safestr(
                ReferenceType.ReferenceTypeName[index], X)
            if label_safe not in X:
                owl_string = build_owl_string(uri_stem=label_safe,
                                              owl_type='Class',
                                              label=label,
                                              comment=None,
                                              index=index,
                                              worksheet=ReferenceType,
                                              worksheet2=Reference,
                                              equivalent_class_uri=None,
                                              subclassof_uri=None,
                                              property_domain=None,
                                              property_range=None,
                                              exclude=X)
                fid.write(owl_string)
        except:
            pass

# ----------------------------------------------------------------------------
# General axioms
# ----------------------------------------------------------------------------
fid.write(print_subheader('General axioms'))
general_axioms_string = print_general_axioms(disjoint_classes_list=[])
fid.write(general_axioms_string)

# ============================================================================
# Doctests
# ============================================================================
#if __name__ == "__main__":
#    import doctest
#    doctest.testmod(verbose=True)
