#!/usr/bin/env python
"""
This program converts a mental health spreadsheet to an RDF text document.

Authors:
    - Arno Klein, 2017  (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017 (jon.clucas@childmind.org)

Copyright 2017, Child Mind Institute (http://childmind.org), Apache v2.0 License

"""
import argparse
import logging
import numpy as np
import os
import pandas as pd
import re
import sys
import traceback
import urllib.request
import warnings


from mhdb.info import __version__ as version
from mhdb.spreadsheet_io import convert_string_to_label, create_label
from mhdb.spreadsheet_io import download_google_sheet, get_index2, get_cell
from mhdb.spreadsheet_io import split_on_slash
from mhdb.write_ttl import check_iri, mhdb_iri, write_header, write_ttl    


logging.basicConfig(filename='debug.log',level=logging.DEBUG)
logging.captureWarnings(True)


def check_source(predicates):
    """
    Check if we have specified a source, and
    if not, put us as the source.
    
    Parameter
    ---------
    predicates: set of 2-tuples
        (predicate: string,
        object: string)
        
    Returns
    -------
    predicates: set of 2-tuples
        (predicate: string,
        object: string)
    """
    if "dcterms:source" not in list(
        list(zip(*predicates))[0]
    ):
        predicates.add(
            (
                "dcterms:source",
                mhdb_iri("Child Minds MATTER Lab")
            )
        )
    return(predicates)
        

def follow_fk(
    sheet,
    foreign_key_header,
    foreign_value_header,
    fk
):
    """
    Function to follow foreign keys to IRIs.
    
    Parameters
    ----------
    sheet: DataFrame
    
    foreign_key_header: string
    
    foreign_value_header: string
    
    fk: int or string
    
    Returns
    -------
    iri: string
    """
    try:
        main_value = sheet.loc[
            sheet[foreign_key_header]==fk
        ][foreign_value_header].values[0]
        if isinstance(main_value, str):
            return(main_value)
        else:
            return(
                str(sheet.loc[
                    sheet[foreign_key_header]==fk
                ][foreign_value_backup_header].values[0])
            )
    except:
        logging.info("Unexpected error (follow_fk):\n\t\t{0}\n\t{1}\n".format(
            sys.exc_info()[0],
            "\t".join([
                foreign_key_header,
                foreign_value_header,
                str(fk)
            ])
        ))


def follow_structure(row, files, stc, prefixes=None):
    """
    Function to follow format of "structure_to_keep"
    
    Parameters
    ----------
    row: Series
        pandas series from generator
        ie, row[1] for row in iterrows()
        
    files : dictionary
        {fn: string:
        file: DataFrame}
        one entry per unique value in structure_to_keep's "File" column
        
    stc : DataFrame
    
    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes
    
    Returns
    -------
    ttl_string : string
    """
    sheet = files[row.File].parse(row.Sheet)
    ttl_string = ""
    if row.Type != "foreign key":
        for structure_row in sheet.iterrows():
            subject = check_iri(
                structure_row[1][row.Column_Header],
                prefixes
            )
            related_predicates = set()
            if (
                isinstance(subject, str) and
                subject.startswith("mhdb:")
            ):
                related_predicates.add(tuple((
                    "rdfs:label",
                    "\"\"\"{0}\"\"\"@en".format(
                        str(structure_row[1][row.Column_Header]).replace(
                            "\n",
                            " "
                        ).replace(
                            "\"",
                            "\\\""
                        ).strip()                        
                    )
                )))
            for related_rows in stc.iterrows():
                if (
                    related_rows[1]["File"] == row.File
                ) and (
                    related_rows[1]["Sheet"] == row.Sheet
                ) and (
                    related_rows[1]["Indexed_Entity"] == row.Column_Header
                ) and (
                    related_rows[1]["Type"] == "foreign key"
                ):
                    fks = structure_row[1][related_rows[1]["Column_Header"]]
                    skb = related_rows[1]["split_key_by"]
                    skb = skb if isinstance(skb, str) else None
                    if isinstance(fks, float) and np.isnan(fks):
                        continue
                    fks = [
                        int(float(fk)) for fk in str(fks).split(skb)
                    ] if skb else [fks]
                    svb = related_rows[1]["split_value_by"]
                    svb = svb if isinstance(svb, str) else None
                    if len(fks):
                        for fk in fks:
                            try:
                                fvalues = follow_fk(
                                    files[
                                        related_rows[1]["Foreign File"]
                                    ].parse(
                                        related_rows[1][
                                            "Foreign Sheet"
                                        ]
                                    ),
                                    related_rows[1][
                                        "Foreign Key Column_Header"
                                    ],
                                    related_rows[1][
                                        "Foreign Value Column_Header"
                                    ],
                                    fk
                                )
                            except:
                                fvalues = follow_fk(
                                    files[
                                        related_rows[1]["Foreign File"]
                                    ].parse(
                                        related_rows[1][
                                            "Foreign Sheet"
                                        ]
                                    ),
                                    related_rows[1][
                                        "Foreign Key Column_Header"
                                    ],
                                    related_rows[1][
                                        "Foreign Value Column_Backup_Header"
                                    ],
                                    fk
                                )
                            fvalues = fvalues.split(svb) if svb else [fvalues]
                            for fvalue in fvalues:
                                related_predicates.add(
                                    (
                                        check_iri(
                                            related_rows[1][
                                                "Definition or Relationship"
                                            ],
                                            prefixes
                                        ),
                                        check_iri(
                                            fvalue,
                                            prefixes
                                        )
                                    ) if related_rows[1][
                                        "Type"
                                    ] == "foreign key" else (
                                        "rdf:type" if
                                        related_rows[1][
                                            "Class, Property or Instance"
                                        ] == "Instance" else
                                        "rdfs:subPropertyOf"
                                        if related_rows[1][
                                            "Class, Property or Instance"
                                        ] == "Property" else
                                        "rdfs:subClassOf",
                                        check_iri(
                                            related_rows[1]["Type"],
                                            prefixes
                                        )
                                    )
                                )              
            check_source(related_predicates)
            ttl_string = "\n".join([
                ttl_string,
                write_ttl(
                    subject,
                    {pred for pred in (
                        related_predicates |
                        {(
                            "rdf:type" if
                            row[
                                "Class, Property or Instance"
                            ] == "Instance" else
                            "rdfs:subPropertyOf" if row[
                                "Class, Property or Instance"
                            ] == "Property" else
                            "rdfs:subClassOf",
                            check_iri(row.Type, prefixes)
                        )}
                    )
                    if (pred) and (
                        "mhdb:None" != pred[0]
                    ) and (
                        "mhdb:None" != pred[1]
                    )},
                    [(
                        pred[0],
                        pred[1]
                    ) for pred in related_predicates if pred[
                        0
                    ]=="dcterms:source"]
                )
            ])
    return(ttl_string)
    

def ICD_code(Disorder, ICD, id, X):
    # function to turtle ICD code and coding system
    ICD = str(ICD)
    ICD_uri_code = get_cell(
        Disorder,
        'ICD{0}code'.format(ICD),
        iD,
        X,
        True
    )
    if ICD_uri_code:
        ICD_uri = "ICD{0}:{1}".format(
            ICD,
            str(ICD_uri_code)
        )
        ICD_coding_string = (
            "{0} health-lifesci:codingSystem \"ICD{1}CM\"^^rdfs:Literal "
        ).format(
            ICD_uri,
            ICD
        )
    else:
        ICD_uri, ICD_coding_string = None, None
    return(ICD_uri, ICD_coding_string)
    
    
def structure_to_keep(files, prefixes=None):
    """
    Parameter
    ---------
    files : dictionary of loaded Excel workbooks
        one entry per unique value in structure_to_keep's "File" column
        
    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes
    
    Returns
    -------
    ttl_string : string
        Turtle format string of relationships defined in structure_to_keep
    """
    stcFILE = download_google_sheet(
        'data/keep.xlsx',
        "1om00-MYhjL59ocI0EWhzvaWqEJWXYj6EVEE9mlXa5kM"
    )
    stc_xls = pd.ExcelFile(stcFILE)
    stc = split_on_slash(
        stc_xls.parse("Sheet1"),
        "Indexed_Entity"
    )
    indexed_entities=stc[["File", "Sheet", "Indexed_Entity"]].drop_duplicates()
    ttl_string = type_definitions(stc, prefixes)
    for row in stc.iterrows():
        if row[1][
            ["File", "Sheet", "Column_Header"]
        ].values.tolist() in indexed_entities.values.tolist():
            row_string = follow_structure(row[1], files, stc, prefixes)
            ttl_string = "\n".join([
                ttl_string,
                row_string
            ])
    return(ttl_string)
    
    
def type_definitions(stc, prefixes=None):
    """
    Function to define types in structure_to_keep
    
    Parameter
    ---------
    stc: DataFrame
    
    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes
    
    Returns
    -------
    ttl_string: string
    """
    stc_types = stc.loc[
        stc.Type != "foreign key"
    ][
        ["Type", "Definition or Relationship"]
    ].drop_duplicates().dropna()
    return("\n".join([
        write_ttl(
            check_iri(row[1].Type, prefixes),
            [
                (
                    "rdfs:isDefinedBy",
                    check_iri(
                        row[1]["Definition or Relationship"],
                        prefixes
                    ) if (
                        ":" in row[1]["Definition or Relationship"] and
                        ": " not in row[1]["Definition or Relationship"]
                    ) else row[1]["Definition or Relationship"]
                )
            ],
            [
                (
                    "dcterms:source",
                    check_iri("Child Minds MATTER Lab")
                )
            ]
        ) for row in stc_types.iterrows()
    ]))
        
    
def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    try:
        mentalhealthFILE = download_google_sheet(
            'data/mentalhealth.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        mentalhealthFILE = 'data/mentalhealth.xlsx'
    try:
        mentalhealthtechnology3FILE = download_google_sheet(
            'data/mentalhealthtechnology3.xlsx',
            "1SK-kT7EH34omb4FJnFW2uJbsXbklawlPXFx2X7hLnc8"
        )
    except:
        mentalhealthtechnology3FILE = 'data/mentalhealthtechnology3.xlsx'
    try:
        revised_structureFILE = download_google_sheet(
            'data/revised_structure.xlsx',
            "1REHmDXldCZ_L403Zq0N0LdhwNNEAXEIJHcNHzOIjnSQ"
        )
    except:
        revised_structureFILE = 'data/revised_structure.xlsx'
    base_uri = "http://www.purl.org/mentalhealth"
    outfile = os.path.join(os.getcwd(), 'mhdb.ttl')
    dsm_outfile = os.path.join(os.getcwd(), 'dsm.ttl')

    # ------------------------------------------------------------------------------
    # Import spreadsheets
    # ------------------------------------------------------------------------------
    mentalhealth_xls = pd.ExcelFile(mentalhealthFILE)
    mentalhealthtechnology3_xls = pd.ExcelFile(mentalhealthtechnology3FILE)
    revised_structure_xls = pd.ExcelFile(revised_structureFILE)
    X = ['', 'nan', np.nan, 'None', None]

    # ------------------------------------------------------------------------------
    # Create output RDF mentalhealthFILE
    # ------------------------------------------------------------------------------
    label = "mental health database"
    comment="""
    ======================
    Mental Health Database
    ======================

    This mental health database inter-relates information about mental health
    diagnoses, symptoms, assessement questionnaires, etc., and is licensed
    under the terms of the Creative Commons BY license.
    Current information can be found on the website, http://mentalhealth.tech.
    """

    # ------------------------------------------------------------------------------
    # Extract worksheets as pandas dataframes
    # ------------------------------------------------------------------------------
    prefixes = [(
        row[1]["Prefix"],
        row[1]["PrefixURI"]
    ) for row in mentalhealth_xls.parse('Ontologies').iterrows()]
    
    # ------------------------------------------------------------------------------
    # Write header
    # with Ontologies listed in mentalhealth.Ontologies ------------------------------------------------------------------------------

    fid = open(outfile, 'w')
    dsmfid = open(dsm_outfile, 'w')
    header_string = write_header(
        base_uri,
        version,
        label,
        comment,
        prefixes=prefixes
    )
    fid.write(header_string)
    dsmfid.write(write_header(
        "{0}/{1}".format(base_uri, "dsm"),
        version,
        "{0} — {1}".format(label, "DSM-V supplement"),
        "\n".join([
            comment,
            "\t\t================\n\t\tDSM-V supplement\n\t\t================"
        ]),
        prefixes=prefixes
    ))
    ttl_string = structure_to_keep(
        {
            "mentalhealth":
                mentalhealth_xls,
            "revised structure for neutral states & lead questions":
                revised_structure_xls,
            "mentalhealthtechnology3":
                mentalhealthtechnology3_xls
        },
        prefixes
    )
    ttl_strings = ttl_string.split(" .\n")
    dsm_turtle = ""
    mhdb_turtle = ""
    for turtle in ttl_strings:
        if "dsm.psychiatryonline.org" in turtle:
            dsm_turtle = " .\n\n".join([
                dsm_turtle,
                turtle
            ]) if len(dsm_turtle) else turtle
        else:
            mhdb_turtle = " .\n\n".join([
                mhdb_turtle,
                turtle
            ]) if len(mhdb_turtle) else turtle
    fid.write("{0} .\n".format(mhdb_turtle.rstrip(" .")))
    dsmfid.write("{0} .\n".format(dsm_turtle.rstrip(" .")))

if __name__ == "__main__":
    main()