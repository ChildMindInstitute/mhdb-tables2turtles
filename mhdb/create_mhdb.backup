#!/usr/bin/env python
"""
This program converts a mental health spreadsheet to an RDF text document.

Authors:
    - Arno Klein, 2017  (arno@childmind.org)  http://binarybottle.com
    - Jon Clucas, 2017 (jon.clucas@childmind.org)

Copyright 2017, Child Mind Institute (http://childmind.org), Apache v2.0 License

"""
import argparse
import logging
import numpy as np
import os
import pandas as pd
import re
import sys
import traceback
import urllib.request
import warnings


from mhdb.info import __version__ as version
from mhdb.spreadsheet_io import convert_string_to_label, create_label
from mhdb.spreadsheet_io import download_google_sheet, get_index2, get_cell
from mhdb.spreadsheet_io import split_on_slash
from mhdb.write_ttl import check_iri, mhdb_iri, write_header, write_ttl


logging.basicConfig(filename='debug.log',level=logging.DEBUG)
logging.captureWarnings(True)


def collect_predicates(subject, row, structure_row, files, stc, prefixes):
    """
    Function to collect predicates for a given subject

    Parameters
    ----------
    subject : string
        Turtle object

    row : Series
        row from structure_to_keep
        pandas series from generator
        ie, row[1] for row in iterrows()

    structure_row : Series
        row indicated in row from structure_to_keep
        pandas series from generator
        ie, structure_row[1] for structure_row in iterrows()

    files : dictionary
        {fn: string:
        file: DataFrame}
        one entry per unique value in structure_to_keep's "File" column

    stc : DataFrame

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes

    Returns
    -------
    related_predicates : set
        set of 2-tuples

        predicates[0]: string
            Turtle property

        predicates[1]: string
            Turtle object
    """
    related_predicates = set()
    for related_row in stc.iterrows():
        if (
            related_row[1]["File"] == row.File
        ) and (
            related_row[1]["Sheet"] == row.Sheet
        ) and (
            related_row[1]["Indexed_Entity"] == row.Column_Header
        ):
            if related_row[1]["Type"] == "foreign key":
                for foreign_pred in foreign(
                    structure_row,
                    related_row[1],
                    files,
                    stc,
                    prefixes
                ):
                    related_predicates.add(foreign_pred)
            elif (
                row["Definition or Relationship"] in [
                    "rdfs:label",
                    "schema:text"
                ]
            ):
                related_predicates = related_predicates | label(
                    row,
                    structure_row,
                    prefixes
                )
            tp = type_pred(row, prefixes)
            if tp:
                related_predicates.add(tp)
    return(related_predicates)


def follow_fk(sheet, foreign_key_header, foreign_value_header, fk):
    """
    Function to follow foreign keys to IRIs.

    Parameters
    ----------
    sheet: DataFrame

    foreign_key_header: string

    foreign_value_header: string

    fk: int or string

    Returns
    -------
    iri: string
    """
    try:
        main_value = sheet.loc[
            sheet[foreign_key_header]==fk
        ][foreign_value_header].values[0]
        if isinstance(main_value, str):
            return(main_value)
        else:
            return(
                str(sheet.loc[
                    sheet[foreign_key_header]==fk
                ][foreign_value_backup_header].values[0])
            )
    except:
        logging.info("Unexpected error (follow_fk):\n\t\t{0}\n\t{1}\n".format(
            sys.exc_info()[0],
            "\t".join([
                foreign_key_header,
                foreign_value_header,
                str(fk)
            ])
        ))


def follow_structure(row, files, stc, prefixes=None):
    """
    Function to follow format of "structure_to_keep"

    Parameters
    ----------
    row: Series
        pandas series from generator
        ie, row[1] for row in iterrows()

    files : dictionary
        {fn: string:
        file: DataFrame}
        one entry per unique value in structure_to_keep's "File" column

    stc : DataFrame

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes

    Returns
    -------
    ttl_dict : dictionary
        keys: str
            subjects
        values: sets of 2-tuple (str, str)
            [0]: predicate
            [1]: object
    """
    sheet = files[row.File].parse(row.Sheet)
    ttl_dict = dict()
    if row.Type != "foreign key":
        for structure_row in sheet.iterrows():
            subjects = structure_row[1][row.Indexed_Entity]
            if isinstance(subjects, str):
                subjects = subjects.split(
                    row.split_indexed_by
                ) if (
                    isinstance(
                        row.split_indexed_by,
                        str
                    ) and (
                        row.split_indexed_by in subjects
                    )
                ) else [subjects]
                subject = check_iri(
                    subjects[0],
                    prefixes
                )
                related_predicates = collect_predicates(
                    subject,
                    row,
                    structure_row[1],
                    files,
                    stc,
                    prefixes
                )
                ttl_dict[subject] = related_predicates if (
                    subject not in ttl_dict
                ) else (
                    ttl_dict[subject] |
                    related_predicates
                )
    return(ttl_dict)


def foreign(structure_row, related_row, files, stc, prefixes):
    """
    Function to follow (a) foreign key(s) and return a set of predicate tuples

    Parameters
    ----------
    structure_row : Series
        row indicated in row from structure_to_keep
        pandas series from generator
        ie, structure_row[1] for structure_row in iterrows()

    related_row : Series
        row indicated in row from structure_to_keep
        pandas series from generator
        ie, related_row[1] for related_row in iterrows()

    files : dictionary
        {fn: string:
        file: DataFrame}
        one entry per unique value in structure_to_keep's "File" column

    stc : DataFrame

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes

    Returns
    -------
    foreign_predicates: set of 2-tuples

        foreign_predicates[0]: string
            Turtle property

        foreign_predicates[1]: string
            Turtle object
    """
    foreign_predicates = set()
    fks = structure_row[
        related_row["Column_Header"]
    ]
    skb = related_row["split_key_by"]
    skb = skb if isinstance(skb, str) else None
    if isinstance(fks, float) and np.isnan(fks):
        return({})
    fks = [
        int(float(fk)) for fk in str(fks).split(skb)
    ] if skb else [fks]
    svb = related_row["split_value_by"]
    svb = svb if isinstance(svb, str) else None
    if len(fks):
        for fk in fks:
            fvalues = follow_fk(
                files[
                    related_row["Foreign File"]
                ].parse(
                    related_row[
                        "Foreign Sheet"
                    ]
                ),
                related_row[
                    "Foreign Key Column_Header"
                ],
                related_row[
                    "Foreign Value Column_Header"
                ],
                fk
            )
            if (
                (fvalues is None)
                or
                (fvalues=="None")
            ) and (
                not related_row[
                    "Foreign Value Column_Backup_Header"
                ] in [
                    None,
                    np.nan,
                    "",
                    "None"
                ]
            ):
                fvalues = follow_fk(
                    files[
                        related_row["Foreign File"]
                    ].parse(
                        related_row[
                            "Foreign Sheet"
                        ]
                    ),
                    related_row[
                        "Foreign Key Column_Header"
                    ],
                    related_row[
                        "Foreign Value Column_Backup_Header"
                    ],
                    fk
                )
            fvalues = fvalues.split(
                svb
            ) if svb and fvalues else [fvalues]
            if fvalues:
                for fvalue in fvalues:
                    foreign_predicates.add(
                        (
                            check_iri(
                                related_row[
                                    "Definition or Relationship"
                                ],
                                prefixes
                            ),
                            check_iri(
                                fvalue,
                                prefixes
                            )
                        )
                    )
    return(foreign_predicates)


def label(row, structure_row, prefixes):
    """
    Function to create and return a tuple of
    Turtle property and Turtle object for a
    given label

    Parameters
    ----------

    row : Series
        row from structure_to_keep
        pandas series from generator
        ie, row[1] for row in iterrows()

    structure_row : Series
        row indicated in row from structure_to_keep
        pandas series from generator
        ie, structure_row[1] for structure_row in iterrows()

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes


    Returns
    -------
    predicates : set of 2-tuples
        predicate[0]: string
            Turtle property

        predicate[1]: string
            Turtle object
    """
    texts = str(
        structure_row[
            row.Column_Header
        ]
    )
    texts = texts.split(
        row.split_indexed_by
    ) if (
        isinstance(
            row.split_indexed_by,
            str
        ) and (
            row.split_indexed_by in texts
        )
    ) else [texts]

    return(
        {
            tuple(
                (
                    check_iri(
                        row["Definition or Relationship"],
                        prefixes
                    ),
                    "\"\"\"{0}\"\"\"@en".format(
                        text.replace(
                            "\n",
                            " "
                        ).replace(
                            "\"",
                            "\\\""
                        ).strip()
                    )
                )
            ) for text in texts
        }
    )


def ICD_code(Disorder, ICD, id, X):
    # function to turtle ICD code and coding system
    ICD = str(ICD)
    ICD_uri_code = get_cell(
        Disorder,
        'ICD{0}code'.format(ICD),
        iD,
        X,
        True
    )
    if ICD_uri_code:
        ICD_uri = "ICD{0}:{1}".format(
            ICD,
            str(ICD_uri_code)
        )
        ICD_coding_string = (
            "{0} health-lifesci:codingSystem \"ICD{1}CM\"^^rdfs:Literal "
        ).format(
            ICD_uri,
            ICD
        )
    else:
        ICD_uri, ICD_coding_string = None, None
    return(ICD_uri, ICD_coding_string)


def structure_to_keep(files, prefixes=None):
    """
    Parameter
    ---------
    files : dictionary of loaded Excel workbooks
        one entry per unique value in structure_to_keep's "File" column

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes

    Returns
    -------
    dicts: list of dictionaries
        default = [sourced, unsourced]
        sourced : dictionary
            dictionary of sourced triples
        unsourced : dictionary
            dictionary of unsourced triples
    """
    dicts = [
        dict(),
        dict()
    ]
    stcFILE = download_google_sheet(
        'data/keep.xlsx',
        "1bQmu1emZ_9J1qfrzTi2CgTELME4mRqn74hMwbY9wV-A"
    )
    stc_xls = pd.ExcelFile(stcFILE)
    stc = split_on_slash(
        stc_xls.parse("Sheet1"),
        "Indexed_Entity"
    )
    indexed_entities = stc[
        [
            "File",
            "Sheet",
            "Indexed_Entity"
        ]
    ].drop_duplicates()
    ttl_string = None
    for row in stc.iterrows():
        if row[1][
            [
                "File",
                "Sheet",
                "Column_Header"
            ]
        ].values.tolist() in indexed_entities.values.tolist():
            row_dict = follow_structure(
                row[1],
                files,
                stc,
                prefixes
            )
            for subject in row_dict:
                if subject in dicts[0]:
                    dicts[0][subject] = dicts[0][subject] | row_dict[subject]
                else:
                    sourced = False
                    for predicate in row_dict[subject]:
                        if predicate[0] == "dcterms:source":
                            sourced = True
                    if sourced:
                        dicts[0][subject] = row_dict[subject]
                    else:
                        dicts[1][subject] = row_dict[subject] if (
                            subject not in dicts[1]
                        ) else dicts[1][subject] | row_dict[subject]
    return(dicts)





def type_pred(row, prefixes):
    """
    Function to create and return a tuple of
    Turtle property and Turtle object for a
    given label

    Parameters
    ----------
    row : Series
        row from structure_to_keep
        pandas series from generator
        ie, row[1] for row in iterrows()

    prefixes : iterable of 2-tuples
        (prefix_string: string
        prefix_iri: string)
        defined RDF prefixes

    Returns
    -------
    predicate : 2-tuple
        predicate[0]: string
            Turtle property

        predicate[1]: string
            Turtle object
    """
    prop = "rdfs:subClassOf" if row[
        "Class, Property or Instance"
    ] == "Class" else "rdfs:subPropertyOf" if row[
        "Class, Property or Instance"
    ] == "Property" else "rdfs:type"
    predicate = tuple(
        (
            prop,
            check_iri(
                row["Type"],
                prefixes
            )
        )
    ) if row["Type"] else None
    return(predicate)


def main():
    # ------------------------------------------------------------------------------
    # Try to get latest spreadsheets
    # Except use local copies
    # ------------------------------------------------------------------------------
    try:
        mentalhealthFILE = download_google_sheet(
            'data/mentalhealth.xlsx',
            "13a0w3ouXq5sFCa0fBsg9xhWx67RGJJJqLjD_Oy1c3b0"
        )
    except:
        mentalhealthFILE = 'data/mentalhealth.xlsx'
    try:
        mentalhealthtechnology3FILE = download_google_sheet(
            'data/mentalhealthtechnology3.xlsx',
            "1SK-kT7EH34omb4FJnFW2uJbsXbklawlPXFx2X7hLnc8"
        )
    except:
        mentalhealthtechnology3FILE = 'data/mentalhealthtechnology3.xlsx'
    try:
        revised_structureFILE = download_google_sheet(
            'data/revised_structure.xlsx',
            "1REHmDXldCZ_L403Zq0N0LdhwNNEAXEIJHcNHzOIjnSQ"
        )
    except:
        revised_structureFILE = 'data/revised_structure.xlsx'
    base_uri = "http://www.purl.org/mentalhealth"
    outfile = os.path.join(os.getcwd(), 'mhdb.ttl')
    dsm_outfile = os.path.join(os.getcwd(), 'dsm.ttl')

    # ------------------------------------------------------------------------------
    # Import spreadsheets
    # ------------------------------------------------------------------------------
    mentalhealth_xls = pd.ExcelFile(mentalhealthFILE)
    mentalhealthtechnology3_xls = pd.ExcelFile(mentalhealthtechnology3FILE)
    revised_structure_xls = pd.ExcelFile(revised_structureFILE)
    X = ['', 'nan', np.nan, 'None', None]

    # ------------------------------------------------------------------------------
    # Create output RDF mentalhealthFILE
    # ------------------------------------------------------------------------------
    label = "mental health database"
    comment="""
    ======================
    Mental Health Database
    ======================

    This mental health database inter-relates information about mental health
    diagnoses, symptoms, assessement questionnaires, etc., and is licensed
    under the terms of the Creative Commons BY license.
    Current information can be found on the website, http://mentalhealth.tech.
    """

    # ------------------------------------------------------------------------------
    # Extract worksheets as pandas dataframes
    # ------------------------------------------------------------------------------
    prefixes = [(
        row[1]["Prefix"],
        row[1]["PrefixURI"]
    ) for row in mentalhealth_xls.parse('Ontologies').iterrows()]

    # ------------------------------------------------------------------------------
    # Write header
    # with Ontologies listed in mentalhealth.Ontologies ------------------------------------------------------------------------------

    fid = open(outfile, 'w')
    dsmfid = open(dsm_outfile, 'w')
    header_string = write_header(
        base_uri,
        version,
        label,
        comment,
        prefixes=prefixes
    )
    fid.write(header_string)
    dsmfid.write(write_header(
        "{0}/{1}".format(base_uri, "dsm"),
        version,
        "{0} — {1}".format(label, "DSM-V supplement"),
        "\n".join([
            comment,
            "\t\t================\n\t\tDSM-V supplement\n\t\t================"
        ]),
        prefixes=prefixes
    ))
    sourced, unsourced = structure_to_keep(
        {
            "mentalhealth":
                mentalhealth_xls,
            "revised structure for neutral states & lead questions":
                revised_structure_xls,
            "mentalhealthtechnology3":
                mentalhealthtechnology3_xls
        },
        prefixes
    )
    dsm_turtle = ""
    mhdb_turtle = ""
    for subject in sourced:
        dsm = False
        for predicate in sourced[subject]:
            if (
                "dsm.psychiatryonline.org" in predicate[1]
            ) or (
                "DSM" in predicate[1]
            ):
                dsm = True
        if dsm:
            dsm_turtle = " \n\n".join([
                dsm_turtle,
                turtle_from_dict(
                    subject,
                    sourced[subject]
                )
            ]) if len(dsm_turtle) else turtle_from_dict(
                subject,
                sourced[subject]
            )
        else:
            mhdb_turtle = " \n\n".join([
                mhdb_turtle,
                turtle_from_dict(
                    subject,
                    sourced[subject]
                )
            ]) if len(mhdb_turtle) else turtle_from_dict(
                subject,
                sourced[subject]
            )
    mhdb_turtle = " \n\n".join([
        mhdb_turtle,
        *[
            turtle_from_dict(
                subject,
                unsourced[subject]
            ) for subject in unsourced
        ]
    ]) if len(mhdb_turtle) else " \n\n".join([
        turtle_from_dict(
            subject,
            unsourced[subject]
        )
    ] for subject in unsourced)
    fid.write("{0} .\n".format(mhdb_turtle.rstrip(" .")))
    dsmfid.write("{0} .\n".format(dsm_turtle.rstrip(" .")))

if __name__ == "__main__":
    main()
